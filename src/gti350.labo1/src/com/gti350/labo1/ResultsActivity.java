package com.gti350.labo1;

import com.gti350.labo1.listeners.SwipeGestureListener;
import com.gti350.labo1.models.Fight;
import com.gti350.labo1.models.Round;
import com.gti350.labo1.models.Winner;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.view.GestureDetectorCompat;
import android.util.Log;
import android.view.Gravity;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.ViewGroup.LayoutParams;
import android.widget.TableLayout;
import android.widget.TableRow;
import android.widget.TextView;

/**
 * @author Laurianne Michaud, Alexandre Billot, Simon Turcotte-Langevin
 * @version 1.0
 */
public class ResultsActivity extends BaseActivity {
	/** The logging tag to quickly identify logs generated by this class. */
	private static final String LoggingTag = ResultsActivity.class.getName();

	/** */
	private Fight fight;

	private int roundCounter;

	/** */
	private GestureDetectorCompat gestureDetector;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_results);

		// Get extras from the intent.
		Bundle extras = getIntent().getExtras();
		if (extras == null) {
			throw new IllegalStateException("Bundle did not contain any extra data. Cannot proceed with results activity.");
		}

		this.fight = (Fight) extras.get(BaseActivity.FightKey);
		if (this.fight == null) {
			throw new IllegalStateException("Bundle did not contain the fight object. Cannot proceed with round definition activity.");
		}

		this.roundCounter = extras.getInt(BaseActivity.CurrentRoundCounterKey);

		Log.i(LoggingTag, "Found fight in intent.");
		synchronizeLabels();
		displayScores();
		String endFightMessage = getEndFightMessage();
		setTitle(getTitle() + (endFightMessage != null ? " - " + getEndFightMessage() : ""));

		// Create the listener for swiping.
		if (this.fight.getWinner() == null) {
			// Fight not done, can swipe to get back to round def.
			SwipeGestureListener swipeGestureListener = new SwipeGestureListener();
			swipeGestureListener.setBottomToTopListener(new SwipeGestureListener.IOnSwipeListener() {
				@Override
				public boolean onSwipe(MotionEvent event1, MotionEvent event2, float velocityX, float velocityY) {
					Intent i = new Intent(ResultsActivity.this, RoundDefinitionActivity.class);
					i.putExtra(BaseActivity.FightKey, fight);
					i.putExtra(BaseActivity.CurrentRoundCounterKey, roundCounter);

					finish();
					startActivity(i);
					return true;
				}
			});
			this.gestureDetector = new GestureDetectorCompat(this, swipeGestureListener);
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.results, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		boolean handled = false;
		int id = item.getItemId();
		if (id == R.id.action_back_to_main) {
			handled = true;

			AlertDialog.Builder builder = new AlertDialog.Builder(ResultsActivity.this);
			builder.setTitle(R.string.title_alert_back_to_main).setMessage(R.string.wish_to_continue_question)
					.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int id) {
							dialog.dismiss();
						}
					}).setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int id) {
							Intent i = new Intent(ResultsActivity.this, MainActivity.class);

							finish();
							startActivity(i);
							dialog.dismiss();
						}
					}).create().show();
		}

		return handled || super.onOptionsItemSelected(item);
	}

	/**
	 * Synchronizes judges and fighters labels so they reflect the fight object
	 * content.
	 */
	private void synchronizeLabels() {
		// Update judge labels.
		((TextView) findViewById(R.id.label_first_judge)).setText(fight.getJudge1().getName());
		((TextView) findViewById(R.id.label_second_judge)).setText(fight.getJudge2().getName());
		((TextView) findViewById(R.id.label_third_judge)).setText(fight.getJudge3().getName());

		((TextView) findViewById(R.id.label_first_judge_red_fighter)).setText(fight.getFighter1().getName());
		((TextView) findViewById(R.id.label_first_judge_blue_fighter)).setText(fight.getFighter2().getName());
		((TextView) findViewById(R.id.label_second_judge_red_fighter)).setText(fight.getFighter1().getName());
		((TextView) findViewById(R.id.label_second_judge_blue_fighter)).setText(fight.getFighter2().getName());
		((TextView) findViewById(R.id.label_third_judge_red_fighter)).setText(fight.getFighter1().getName());
		((TextView) findViewById(R.id.label_third_judge_blue_fighter)).setText(fight.getFighter2().getName());
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		// Check if the swipe detector can handle the event.
		// Else, pass the event along to the super class.
		return (gestureDetector != null && gestureDetector.onTouchEvent(event)) || super.onTouchEvent(event);
	}

	private void displayScores() {
		int judge1RedScore = 0, judge1BlueScore = 0, judge2RedScore = 0, judge2BlueScore = 0, judge3RedScore = 0, judge3BlueScore = 0;
		TableLayout tableResults = (TableLayout) findViewById(R.id.table_results);
		for (Round round : fight.getRounds()) {
			int scoreFigther1Judge1 = round.getJudgeScore1().getScoreFighter1().getEffectiveScore();
			int scoreFigther2Judge1 = round.getJudgeScore1().getScoreFighter2().getEffectiveScore();
			int scoreFigther1Judge2 = round.getJudgeScore2().getScoreFighter1().getEffectiveScore();
			int scoreFigther2Judge2 = round.getJudgeScore2().getScoreFighter2().getEffectiveScore();
			int scoreFigther1Judge3 = round.getJudgeScore3().getScoreFighter1().getEffectiveScore();
			int scoreFigther2Judge3 = round.getJudgeScore3().getScoreFighter2().getEffectiveScore();

			TableRow row = new TableRow(ResultsActivity.this);
			row.addView(getScoreCell(scoreFigther1Judge1));
			row.addView(getScoreCell(scoreFigther2Judge1));
			row.addView(getScoreCell(scoreFigther1Judge2));
			row.addView(getScoreCell(scoreFigther2Judge2));
			row.addView(getScoreCell(scoreFigther1Judge3));
			row.addView(getScoreCell(scoreFigther2Judge3));
			tableResults.addView(row);

			judge1RedScore += round.getJudgeScore1().getScoreFighter1().getEffectiveScore();
			judge1BlueScore += round.getJudgeScore1().getScoreFighter2().getEffectiveScore();

			judge2RedScore += round.getJudgeScore2().getScoreFighter1().getEffectiveScore();
			judge2BlueScore += round.getJudgeScore2().getScoreFighter2().getEffectiveScore();

			judge3RedScore += round.getJudgeScore3().getScoreFighter1().getEffectiveScore();
			judge3BlueScore += round.getJudgeScore3().getScoreFighter2().getEffectiveScore();
		}

		TableRow row = new TableRow(ResultsActivity.this);
		row.addView(getScoreCell(judge1RedScore));
		row.addView(getScoreCell(judge1BlueScore));
		row.addView(getScoreCell(judge2RedScore));
		row.addView(getScoreCell(judge2BlueScore));
		row.addView(getScoreCell(judge3RedScore));
		row.addView(getScoreCell(judge3BlueScore));
		tableResults.addView(row);
	}

	private TextView getScoreCell(int score) {
		final int textColor = getResources().getColor(R.color.text_white);

		TextView cell = new TextView(ResultsActivity.this);
		cell.setText(Integer.toString(score));
		cell.setTextColor(textColor);
		cell.setGravity(Gravity.CENTER);
		cell.setLayoutParams(new TableRow.LayoutParams(0, LayoutParams.WRAP_CONTENT, 1));

		return cell;
	}

	public String getEndFightMessage() {
		Winner winner = this.fight.getWinner();
		if (winner == null) {
			return null;
		}

		String winnerName = (winner.getWinner() != null ? winner.getWinner().getName() : "");
		String resultStr = "";
		switch (winner.getWinMethod()) {
			case Disqualification:
				resultStr = String.format("%s winner by majority", winnerName);
				break;
			case Ko:
				resultStr = String.format("%s winner by ko", winnerName);
				break;
			case Tko:
				resultStr = String.format("%s winner by tko", winnerName);
				break;
			case Classic:
				switch (winner.getDecision()) {
					case Unanimous:
						resultStr = String.format("%s winner by unanimous decision", winnerName);
						break;
					case Majority:
						resultStr = String.format("%s winner by major decision", winnerName);
						break;
					default:
						resultStr = "Fight ended in tie.";
				}
				break;
		}

		return resultStr;
	}
}
