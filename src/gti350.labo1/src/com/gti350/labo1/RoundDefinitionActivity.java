package com.gti350.labo1;

import java.util.Collection;

import com.gti350.labo1.listeners.SwipeGestureListener;
import com.gti350.labo1.listeners.SwipeGestureListener.IOnSwipeListener;
import com.gti350.labo1.models.Fight;
import com.gti350.labo1.models.Round;

import android.content.Intent;
import android.content.res.Configuration;
import android.os.Bundle;
import android.support.v4.view.GestureDetectorCompat;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ToggleButton;

/**
 * @author Laurianne Michaud, Alexandre Billot, Simon Turcotte-Langevin
 * @version 1.0
 */
public class RoundDefinitionActivity extends BaseActivity {

	/** The logging tag to quickly identify logs generated by this class. */
	private static final String LoggingTag = RoundDefinitionActivity.class.getName();

	/** */
	private GestureDetectorCompat gestureDetector;

	private ToggleButton redFighterFirstJudgeButton;
	private ToggleButton blueFighterFirstJudgeButton;
	private ToggleButton redFighterSecondJudgeButton;
	private ToggleButton blueFighterSecondJudgeButton;
	private ToggleButton redFighterThirdJudgeButton;
	private ToggleButton blueFighterThirdJudgeButton;

	private Fight fight;
	private int roundCounter;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_round_definition);

		// Get extras from the intent.
		Bundle extras = getIntent().getExtras();

		this.fight = (Fight) extras.get(BaseActivity.FightKey);
		if (this.fight == null) {
			throw new IllegalStateException("Bundle did not contain the fight object. Cannot proceed with round definition activity.");
		}

		Log.i(LoggingTag, "Found fight in intent.");

		// Get the current round counter. Defaults to 1 if counter is not in
		// extras.
		roundCounter = extras.containsKey(BaseActivity.CurrentRoundCounterKey) ? extras.getInt(CurrentRoundCounterKey) : 1;
		updateTitle();

		// Cache useful controls.
		this.redFighterFirstJudgeButton = (ToggleButton) findViewById(R.id.button_first_judge_red);
		this.blueFighterFirstJudgeButton = (ToggleButton) findViewById(R.id.button_first_judge_blue);
		this.redFighterSecondJudgeButton = (ToggleButton) findViewById(R.id.button_second_judge_red);
		this.blueFighterSecondJudgeButton = (ToggleButton) findViewById(R.id.button_second_judge_blue);
		this.redFighterThirdJudgeButton = (ToggleButton) findViewById(R.id.button_third_judge_red);
		this.blueFighterThirdJudgeButton = (ToggleButton) findViewById(R.id.button_third_judge_blue);

		// Bind on checked event handler for each of the toggle button pairs.
		this.redFighterFirstJudgeButton.setOnCheckedChangeListener(new OnFighterToggleButtonCheckedChanged(this.blueFighterFirstJudgeButton));
		this.blueFighterFirstJudgeButton.setOnCheckedChangeListener(new OnFighterToggleButtonCheckedChanged(this.redFighterFirstJudgeButton));

		this.redFighterSecondJudgeButton.setOnCheckedChangeListener(new OnFighterToggleButtonCheckedChanged(this.blueFighterSecondJudgeButton));
		this.blueFighterSecondJudgeButton.setOnCheckedChangeListener(new OnFighterToggleButtonCheckedChanged(this.redFighterSecondJudgeButton));

		this.redFighterThirdJudgeButton.setOnCheckedChangeListener(new OnFighterToggleButtonCheckedChanged(this.blueFighterThirdJudgeButton));
		this.blueFighterThirdJudgeButton.setOnCheckedChangeListener(new OnFighterToggleButtonCheckedChanged(this.redFighterThirdJudgeButton));

		// Create the listener for swiping.
		SwipeGestureListener swipeGestureListener = new SwipeGestureListener(new OnPreviousSwipeListener(), new OnNextSwipeListener());
		this.gestureDetector = new GestureDetectorCompat(this, swipeGestureListener);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}

		return super.onOptionsItemSelected(item);
	}

	@Override
	public void onConfigurationChanged(Configuration configure) {
		super.onConfigurationChanged(configure);
		Log.i(LoggingTag, "Configuration change detected.");
	}

	/**
	 * Updates the title with the number of the current round.
	 */
	private void updateTitle() {
		// Set the title, according to the current round counter.
		StringBuilder titleBuilder = new StringBuilder();
		titleBuilder.append(roundCounter);
		switch (roundCounter) {
			case 1:
				titleBuilder.append("st ");
				break;
			case 2:
				titleBuilder.append("nd ");
				break;
			case 3:
				titleBuilder.append("rd ");
				break;
			default:
				titleBuilder.append("th ");
				break;
		}
		titleBuilder.append(getTitle());
		setTitle(titleBuilder);
	}

	/**
	 * @author Laurianne Michaud, Alexandre Billot, Simon Turcotte-Langevin
	 * @version 1.0
	 */
	private class OnFighterToggleButtonCheckedChanged implements OnCheckedChangeListener {
		/** */
		private CompoundButton otherFighterButton;

		/** */
		private int onColor;

		/** */
		private int offColor;

		public OnFighterToggleButtonCheckedChanged(CompoundButton otherFighterButton) {
			if (otherFighterButton == null) {
				throw new IllegalArgumentException("otherFighterButton cannot be null.");
			}

			this.otherFighterButton = otherFighterButton;
			this.onColor = getResources().getColor(R.color.toggle_button_on);
			this.offColor = getResources().getColor(R.color.toggle_button_off);
		}

		@Override
		public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
			// Toggle the other fighter's button.
			this.otherFighterButton.setChecked(!isChecked);
			buttonView.setBackgroundColor(isChecked ? onColor : offColor);
		}
	}

	/**
	 * 
	 * @author Laurianne Michaud, Alexandre Billot, Simon Turcotte-Langevin
	 * @version 1.0
	 */
	private class OnPreviousSwipeListener implements IOnSwipeListener {
		@Override
		public boolean onSwipe(MotionEvent event1, MotionEvent event2, float velocityX, float velocityY) {
			// Remove the last submmited round.
			Collection<Round> submittedRounds = fight.getRounds();
			submittedRounds.remove(submittedRounds.size() - 1);
			roundCounter--;

			Intent i;
			if (roundCounter == 0) {
				// User wants to go back to judge definition.
				i = new Intent(RoundDefinitionActivity.this, JudgeDefinitionActivity.class);
				i.putExtra(BaseActivity.FirstJudgeKey, fight.getJudge1());
				i.putExtra(BaseActivity.SecondJudgeKey, fight.getJudge2());
				i.putExtra(BaseActivity.ThirdJudgeKey, fight.getJudge3());
			} else {
				// User wants to go back to the previous round definition.
				i = new Intent(RoundDefinitionActivity.this, RoundDefinitionActivity.class);
				i.putExtra(BaseActivity.FightKey, fight);
				i.putExtra(BaseActivity.CurrentRoundCounterKey, roundCounter);
			}

			startActivity(i);
			return true;
		}
	}

	/**
	 * @author Laurianne Michaud, Alexandre Billot, Simon Turcotte-Langevin
	 * @version 1.0
	 */
	private class OnNextSwipeListener implements IOnSwipeListener {
		@Override
		public boolean onSwipe(MotionEvent event1, MotionEvent event2, float velocityX, float velocityY) {
			return true;
		}
	}
}
