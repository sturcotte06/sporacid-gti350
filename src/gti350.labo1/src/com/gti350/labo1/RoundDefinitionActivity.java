package com.gti350.labo1;

import java.util.List;

import com.gti350.labo1.listeners.SwipeGestureListener;
import com.gti350.labo1.listeners.SwipeGestureListener.IOnSwipeListener;
import com.gti350.labo1.models.Fight;
import com.gti350.labo1.models.JudgeScore;
import com.gti350.labo1.models.Round;
import com.gti350.labo1.models.Score;
import com.gti350.labo1.models.WinMethod;
import com.gti350.labo1.models.Winner;

import android.app.AlertDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.support.v4.view.GestureDetectorCompat;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ToggleButton;
import android.widget.TextView;

/**
 * @author Laurianne Michaud, Alexandre Billot, Simon Turcotte-Langevin
 * @version 1.0
 */
public class RoundDefinitionActivity extends BaseActivity {

	/** The logging tag to quickly identify logs generated by this class. */
	private static final String LoggingTag = RoundDefinitionActivity.class.getName();

	/** */
	private GestureDetectorCompat gestureDetector;

	private ToggleButton redFighterFirstJudgeButton;
	private ToggleButton blueFighterFirstJudgeButton;
	private ToggleButton redFighterSecondJudgeButton;
	private ToggleButton blueFighterSecondJudgeButton;
	private ToggleButton redFighterThirdJudgeButton;
	private ToggleButton blueFighterThirdJudgeButton;

	private Fight fight;
	private int roundCounter;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_round_definition);

		// Get extras from the intent.
		Bundle extras = getIntent().getExtras();
		if (extras == null) {
			throw new IllegalStateException("Bundle did not contain any extra data. Cannot proceed with judge definition activity.");
		}

		this.fight = (Fight) extras.get(BaseActivity.FightKey);
		if (this.fight == null) {
			throw new IllegalStateException("Bundle did not contain the fight object. Cannot proceed with round definition activity.");
		}

		Log.i(LoggingTag, "Found fight in intent.");

		// Get the current round counter. Defaults to 1 if counter is not in
		// extras.
		roundCounter = extras.containsKey(BaseActivity.CurrentRoundCounterKey) ? extras.getInt(CurrentRoundCounterKey) : 1;
		updateTitle();

		// Cache useful controls.
		this.redFighterFirstJudgeButton = (ToggleButton) findViewById(R.id.button_first_judge_red);
		this.blueFighterFirstJudgeButton = (ToggleButton) findViewById(R.id.button_first_judge_blue);
		this.redFighterSecondJudgeButton = (ToggleButton) findViewById(R.id.button_second_judge_red);
		this.blueFighterSecondJudgeButton = (ToggleButton) findViewById(R.id.button_second_judge_blue);
		this.redFighterThirdJudgeButton = (ToggleButton) findViewById(R.id.button_third_judge_red);
		this.blueFighterThirdJudgeButton = (ToggleButton) findViewById(R.id.button_third_judge_blue);

		// Sync labels to reflect the names of fighters and judges.
		synchronizeLabels();

		// Bind on checked event handler for each of the toggle button pairs.
		this.redFighterFirstJudgeButton.setOnCheckedChangeListener(new OnFighterToggleButtonCheckedChanged(this.blueFighterFirstJudgeButton));
		this.blueFighterFirstJudgeButton.setOnCheckedChangeListener(new OnFighterToggleButtonCheckedChanged(this.redFighterFirstJudgeButton));

		this.redFighterSecondJudgeButton.setOnCheckedChangeListener(new OnFighterToggleButtonCheckedChanged(this.blueFighterSecondJudgeButton));
		this.blueFighterSecondJudgeButton.setOnCheckedChangeListener(new OnFighterToggleButtonCheckedChanged(this.redFighterSecondJudgeButton));

		this.redFighterThirdJudgeButton.setOnCheckedChangeListener(new OnFighterToggleButtonCheckedChanged(this.blueFighterThirdJudgeButton));
		this.blueFighterThirdJudgeButton.setOnCheckedChangeListener(new OnFighterToggleButtonCheckedChanged(this.redFighterThirdJudgeButton));

		// Check if a previous round object was serialized.
		// If so, use its state to repopulate this activity.
		Round previousRound = (Round) extras.get(BaseActivity.PreviousRoundKey);
		if (previousRound != null) {
			boolean firstJudgeFavorsRed = previousRound.getJudgeScore1().getScoreFighter1().getInitialScore() > previousRound.getJudgeScore1()
					.getScoreFighter2().getInitialScore();
			boolean secondJudgeFavorsRed = previousRound.getJudgeScore2().getScoreFighter1().getInitialScore() > previousRound.getJudgeScore2()
					.getScoreFighter2().getInitialScore();
			boolean thirdJudgeFavorsRed = previousRound.getJudgeScore3().getScoreFighter1().getInitialScore() > previousRound.getJudgeScore3()
					.getScoreFighter2().getInitialScore();

			boolean firstJudgeFavorsBlue = previousRound.getJudgeScore1().getScoreFighter2().getInitialScore() > previousRound.getJudgeScore1()
					.getScoreFighter1().getInitialScore();
			boolean secondJudgeFavorsBlue = previousRound.getJudgeScore2().getScoreFighter2().getInitialScore() > previousRound.getJudgeScore2()
					.getScoreFighter1().getInitialScore();
			boolean thirdJudgeFavorsBlue = previousRound.getJudgeScore3().getScoreFighter2().getInitialScore() > previousRound.getJudgeScore3()
					.getScoreFighter1().getInitialScore();

			this.redFighterFirstJudgeButton.setChecked(firstJudgeFavorsRed);
			this.blueFighterFirstJudgeButton.setChecked(firstJudgeFavorsBlue);
			this.redFighterSecondJudgeButton.setChecked(secondJudgeFavorsRed);
			this.blueFighterSecondJudgeButton.setChecked(secondJudgeFavorsBlue);
			this.redFighterThirdJudgeButton.setChecked(thirdJudgeFavorsRed);
			this.blueFighterThirdJudgeButton.setChecked(thirdJudgeFavorsBlue);
		}

		// Create the listener for swiping.
		SwipeGestureListener swipeGestureListener = new SwipeGestureListener(new OnPreviousSwipeListener(), new OnNextSwipeListener(), null,
				new OnPartialResultSwipeListener());
		this.gestureDetector = new GestureDetectorCompat(this, swipeGestureListener);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.round_definition, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		boolean handled = false;
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_ko || id == R.id.action_disqualify || id == R.id.action_tko) {
			handled = true;

			final String title;
			final WinMethod winMethod;
			if (id == R.id.action_ko) {
				winMethod = WinMethod.Ko;
				title = getString(R.string.title_alert_ko);
			} else if (id == R.id.action_tko) {
				winMethod = WinMethod.Tko;
				title = getString(R.string.title_alert_tko);
			} else {
				winMethod = WinMethod.Disqualification;
				title = getString(R.string.title_alert_disqualify);
			}

			AlertDialog.Builder builder = new AlertDialog.Builder(RoundDefinitionActivity.this);
			builder.setTitle(title).setNegativeButton(this.fight.getFighter1().getName(), new DialogInterface.OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int id) {
					Winner winner = new Winner(fight.getFighter2(), winMethod);
					fight.declareWinner(winner);
					dialog.dismiss();
				}
			}).setPositiveButton(this.fight.getFighter2().getName(), new DialogInterface.OnClickListener() {
				@Override
				public void onClick(DialogInterface dialog, int id) {
					Winner winner = new Winner(fight.getFighter1(), winMethod);
					fight.declareWinner(winner);
					dialog.dismiss();
				}
			}).create().show();
		} else if (id == R.id.action_penalty) {
			handled = true;

			// AlertDialog.Builder builder = new
			// AlertDialog.Builder(RoundDefinitionActivity.this);
			// builder.setSingleChoiceItems(new String[] {
			// fight.getJudge1().getName(), fight.getJudge2().getName(),
			// fight.getJudge3().getName() }, 0, null);
			// builder.setTitle(R.string.action_penalty).setNegativeButton(this.fight.getFighter1().getName(),
			// new DialogInterface.OnClickListener() {
			// @Override
			// public void onClick(DialogInterface dialog, int id) {
			// dialog.dismiss();
			// }
			// }).setPositiveButton(this.fight.getFighter2().getName(), new
			// DialogInterface.OnClickListener() {
			// @Override
			// public void onClick(DialogInterface dialog, int id) {
			// dialog.dismiss();
			// }
			// }).create().show();
			Intent i = new Intent(RoundDefinitionActivity.this, PenaltyDefinitionActivity.class);
			i.putExtra(BaseActivity.FightKey, fight);
			startActivity(i);
		} else if (id == R.id.action_back_to_main) {
			handled = true;

			AlertDialog.Builder builder = new AlertDialog.Builder(RoundDefinitionActivity.this);
			builder.setTitle(R.string.title_alert_back_to_main).setMessage(R.string.wish_to_continue_question)
					.setNegativeButton(android.R.string.cancel, new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int id) {
							dialog.dismiss();
						}
					}).setPositiveButton(android.R.string.ok, new DialogInterface.OnClickListener() {
						@Override
						public void onClick(DialogInterface dialog, int id) {
							Intent i = new Intent(RoundDefinitionActivity.this, MainActivity.class);

							finish();
							startActivity(i);
							dialog.dismiss();
						}
					}).create().show();
		}

		return handled || super.onOptionsItemSelected(item);
	}

	// @Override
	// public void onConfigurationChanged(Configuration configure) {
	// super.onConfigurationChanged(configure);
	// Log.i(LoggingTag, "Configuration change detected.");
	// }

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		// Check if the swipe detector can handle the event.
		// Else, pass the event along to the super class.
		return gestureDetector.onTouchEvent(event) || super.onTouchEvent(event);
	}

	/**
	 * Updates the title with the number of the current round.
	 */
	private void updateTitle() {
		// Set the title, according to the current round counter.
		StringBuilder titleBuilder = new StringBuilder();
		titleBuilder.append(roundCounter);
		switch (roundCounter) {
			case 1:
				titleBuilder.append("st ");
				break;
			case 2:
				titleBuilder.append("nd ");
				break;
			case 3:
				titleBuilder.append("rd ");
				break;
			default:
				titleBuilder.append("th ");
				break;
		}

		titleBuilder.append(getTitle());
		setTitle(titleBuilder);
	}

	/**
	 * Synchronizes judges and fighters labels so they reflect the fight object
	 * content.
	 */
	private void synchronizeLabels() {
		// Update judge labels.
		((TextView) findViewById(R.id.label_first_judge)).setText(fight.getJudge1().getName());
		((TextView) findViewById(R.id.label_second_judge)).setText(fight.getJudge2().getName());
		((TextView) findViewById(R.id.label_third_judge)).setText(fight.getJudge3().getName());

		// Update red fighter buttons.
		this.redFighterFirstJudgeButton.setTextOn(fight.getFighter1().getName());
		this.redFighterFirstJudgeButton.setTextOff(fight.getFighter1().getName());
		this.redFighterSecondJudgeButton.setTextOn(fight.getFighter1().getName());
		this.redFighterSecondJudgeButton.setTextOff(fight.getFighter1().getName());
		this.redFighterThirdJudgeButton.setTextOn(fight.getFighter1().getName());
		this.redFighterThirdJudgeButton.setTextOff(fight.getFighter1().getName());

		// Force private call to syncTextState().
		this.redFighterFirstJudgeButton.setChecked(this.redFighterFirstJudgeButton.isChecked());
		this.redFighterSecondJudgeButton.setChecked(this.redFighterSecondJudgeButton.isChecked());
		this.redFighterThirdJudgeButton.setChecked(this.redFighterThirdJudgeButton.isChecked());

		// Update blue fighter buttons.
		this.blueFighterFirstJudgeButton.setTextOn(fight.getFighter2().getName());
		this.blueFighterFirstJudgeButton.setTextOff(fight.getFighter2().getName());
		this.blueFighterSecondJudgeButton.setTextOn(fight.getFighter2().getName());
		this.blueFighterSecondJudgeButton.setTextOff(fight.getFighter2().getName());
		this.blueFighterThirdJudgeButton.setTextOn(fight.getFighter2().getName());
		this.blueFighterThirdJudgeButton.setTextOff(fight.getFighter2().getName());

		// Force private call to syncTextState().
		this.blueFighterFirstJudgeButton.setChecked(this.blueFighterFirstJudgeButton.isChecked());
		this.blueFighterSecondJudgeButton.setChecked(this.blueFighterSecondJudgeButton.isChecked());
		this.blueFighterThirdJudgeButton.setChecked(this.blueFighterThirdJudgeButton.isChecked());
	}

	/**
	 * @author Laurianne Michaud, Alexandre Billot, Simon Turcotte-Langevin
	 * @version 1.0
	 */
	private class OnFighterToggleButtonCheckedChanged implements OnCheckedChangeListener {
		/**
		 * The other fighter button that will be toggled at the same time as
		 * this button.
		 */
		private CompoundButton otherFighterButton;

		/** The color of the background when the button is checked. */
		private int onColor;

		/** The color of the background when the button is not checked. */
		private int offColor;

		public OnFighterToggleButtonCheckedChanged(CompoundButton otherFighterButton) {
			if (otherFighterButton == null) {
				throw new IllegalArgumentException("otherFighterButton cannot be null.");
			}

			this.otherFighterButton = otherFighterButton;
			this.onColor = getResources().getColor(R.color.toggle_button_on);
			this.offColor = getResources().getColor(R.color.toggle_button_off);
		}

		@Override
		public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
			if (isChecked) {
				// Toggle the other fighter's button.
				this.otherFighterButton.setChecked(false);
				this.otherFighterButton.setBackgroundColor(offColor);

				buttonView.setBackgroundColor(onColor);
			} else {
				buttonView.setBackgroundColor(offColor);
			}
		}
	}

	/**
	 * 
	 * @author Laurianne Michaud, Alexandre Billot, Simon Turcotte-Langevin
	 * @version 1.0
	 */
	private class OnPreviousSwipeListener implements IOnSwipeListener {
		@Override
		public boolean onSwipe(MotionEvent event1, MotionEvent event2, float velocityX, float velocityY) {
			Intent i;
			if (roundCounter == 1) {
				// User wants to go back to judge definition.
				i = new Intent(RoundDefinitionActivity.this, JudgeDefinitionActivity.class);

				i.putExtra(BaseActivity.RedFighterKey, fight.getFighter1());
				i.putExtra(BaseActivity.BlueFighterKey, fight.getFighter2());
				i.putExtra(BaseActivity.FirstJudgeKey, fight.getJudge1());
				i.putExtra(BaseActivity.SecondJudgeKey, fight.getJudge2());
				i.putExtra(BaseActivity.ThirdJudgeKey, fight.getJudge3());
			} else {
				// Remove the last submmited round.
				List<Round> submittedRounds = fight.getRounds();
				Round previousRound = submittedRounds.remove(submittedRounds.size() - 1);
				roundCounter--;

				// User wants to go back to the previous round definition.
				i = new Intent(RoundDefinitionActivity.this, RoundDefinitionActivity.class);
				i.putExtra(BaseActivity.FightKey, fight);
				i.putExtra(BaseActivity.PreviousRoundKey, previousRound);
				i.putExtra(BaseActivity.CurrentRoundCounterKey, roundCounter);
			}

			finish();
			startActivity(i);
			return true;
		}
	}

	/**
	 * @author Laurianne Michaud, Alexandre Billot, Simon Turcotte-Langevin
	 * @version 1.0
	 */
	private class OnNextSwipeListener implements IOnSwipeListener {
		@Override
		public boolean onSwipe(MotionEvent event1, MotionEvent event2, float velocityX, float velocityY) {
			// Set every judge scores based on toggle button selection.
			// If red was selected, red has max pts, blue has min pts and
			// vice-versa.
			int judge1ScoreRed = redFighterFirstJudgeButton.isChecked() ? Score.MaximumScore : blueFighterFirstJudgeButton.isChecked()
					? Score.MinimumInitialScore : Score.MaximumScore;
			int judge2ScoreRed = redFighterSecondJudgeButton.isChecked() ? Score.MaximumScore : blueFighterSecondJudgeButton.isChecked()
					? Score.MinimumInitialScore : Score.MaximumScore;
			int judge3ScoreRed = redFighterThirdJudgeButton.isChecked() ? Score.MaximumScore : blueFighterThirdJudgeButton.isChecked()
					? Score.MinimumInitialScore : Score.MaximumScore;
			int judge1ScoreBlue = blueFighterFirstJudgeButton.isChecked() ? Score.MaximumScore : redFighterFirstJudgeButton.isChecked()
					? Score.MinimumInitialScore : Score.MaximumScore;
			int judge2ScoreBlue = blueFighterSecondJudgeButton.isChecked() ? Score.MaximumScore : redFighterSecondJudgeButton.isChecked()
					? Score.MinimumInitialScore : Score.MaximumScore;
			int judge3ScoreBlue = blueFighterThirdJudgeButton.isChecked() ? Score.MaximumScore : redFighterThirdJudgeButton.isChecked()
					? Score.MinimumInitialScore : Score.MaximumScore;
			JudgeScore judgeScore1 = new JudgeScore(fight.getJudge1(), new Score(judge1ScoreRed), new Score(judge1ScoreBlue));
			JudgeScore judgeScore2 = new JudgeScore(fight.getJudge2(), new Score(judge2ScoreRed), new Score(judge2ScoreBlue));
			JudgeScore judgeScore3 = new JudgeScore(fight.getJudge3(), new Score(judge3ScoreRed), new Score(judge3ScoreBlue));

			// Register the new round.
			fight.registerRound(judgeScore1, judgeScore2, judgeScore3);
			Log.i(LoggingTag, String.format(
					"Round registered: [Judge %d, red: %d to blue: %d], [Judge %d, red: %d to blue: %d], [Judge %d, red: %d to blue: %d]", 1, judge1ScoreRed,
					judge1ScoreBlue, 2, judge2ScoreRed, judge2ScoreBlue, 3, judge3ScoreRed, judge3ScoreBlue));
			roundCounter++;

			// Go to the next round definition, unless we currently did the last
			// round, in which case we'll go to the results.
			Intent i = roundCounter > Fight.MaxRound ? new Intent(RoundDefinitionActivity.this, null) : new Intent(RoundDefinitionActivity.this,
					RoundDefinitionActivity.class);
			i.putExtra(BaseActivity.FightKey, fight);
			i.putExtra(BaseActivity.CurrentRoundCounterKey, roundCounter);

			finish();
			startActivity(i);
			return true;
		}
	}

	/**
	 * @author Laurianne Michaud, Alexandre Billot, Simon Turcotte-Langevin
	 * @version 1.0
	 */
	public class OnPartialResultSwipeListener implements IOnSwipeListener {
		@Override
		public boolean onSwipe(MotionEvent event1, MotionEvent event2, float velocityX, float velocityY) {
			Intent i = new Intent(RoundDefinitionActivity.this, null); // ResultActivity.class
			i.putExtra(BaseActivity.FightKey, fight);
			i.putExtra(BaseActivity.CurrentRoundCounterKey, roundCounter);

			finish();
			startActivity(i);
			return true;
		}
	}
}
