package com.gti350.labo1;

import com.gti350.labo1.listeners.SwipeGestureListener;
import com.gti350.labo1.listeners.SwipeGestureListener.IOnSwipeListener;
import com.gti350.labo1.models.Fighter;

import android.content.Intent;
import android.content.res.Configuration;
import android.os.Bundle;
import android.support.v4.view.GestureDetectorCompat;
import android.text.Editable;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.widget.EditText;

/**
 * @author Laurianne Michaud, Alexandre Billot, Simon Turcotte-Langevin
 * @version 1.0
 */
public class FighterDefinitionActivity extends BaseActivity {

	/** The logging tag to quickly identify logs generated by this class. */
	private static final String LoggingTag = FighterDefinitionActivity.class.getName();

	/** */
	private GestureDetectorCompat gestureDetector;

	/** */
	private EditText redFighterTextbox;

	/** */
	private EditText blueFighterTextbox;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_fighter_definition);

		// Cache useful controls.
		redFighterTextbox = (EditText) findViewById(R.id.textbox_red_fighter);
		blueFighterTextbox = (EditText) findViewById(R.id.textbox_blue_fighter);

		// Create the listener for swiping.
		SwipeGestureListener swipeGestureListener = new SwipeGestureListener(new OnPreviousSwipeListener(), new OnNextSwipeListener());
		gestureDetector = new GestureDetectorCompat(this, swipeGestureListener);
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.fighter_definition, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		if (id == R.id.action_settings) {
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	public boolean onTouchEvent(MotionEvent event) {
		return gestureDetector.onTouchEvent(event) || super.onTouchEvent(event);
	}

	@Override
	public void onConfigurationChanged(Configuration configure) {
		super.onConfigurationChanged(configure);
		Log.i(LoggingTag, "Configuration change detected.");
	}

	/**
	 * @author Laurianne Michaud, Alexandre Billot, Simon Turcotte-Langevin
	 * @version 1.0
	 */
	private class OnPreviousSwipeListener implements IOnSwipeListener {
		@Override
		public boolean onSwipe(MotionEvent event1, MotionEvent event2, float velocityX, float velocityY) {
			Intent i = new Intent(FighterDefinitionActivity.this, MainActivity.class);
			startActivity(i);

			return true;
		}
	}

	/**
	 * @author Laurianne Michaud, Alexandre Billot, Simon Turcotte-Langevin
	 * @version 1.0
	 */
	private class OnNextSwipeListener implements IOnSwipeListener {
		@Override
		public boolean onSwipe(MotionEvent event1, MotionEvent event2, float velocityX, float velocityY) {
			// Validate current activity content.
			Editable redFighterName = redFighterTextbox.getText();
			Editable blueFighterName = blueFighterTextbox.getText();
			boolean redFighterValid = !redFighterName.toString().isEmpty();
			boolean blueFighterValid = !blueFighterName.toString().isEmpty();

			if (redFighterValid && blueFighterValid) {
				// Valid.
				Log.i(LoggingTag, "Fighter definitions were valid.");

				Intent i = new Intent(FighterDefinitionActivity.this, JudgeDefinitionActivity.class);
				Fighter redFighter = new Fighter(Fighter.FighterColor.Red, redFighterName.toString());
				Fighter blueFighter = new Fighter(Fighter.FighterColor.Blue, blueFighterName.toString());

				i.putExtra(BaseActivity.RedFighterKey, redFighter);
				Log.i(LoggingTag, "Serialized red fighter.");

				i.putExtra(BaseActivity.BlueFighterKey, blueFighter);
				Log.i(LoggingTag, "Serialized blue fighter.");

				startActivity(i);
				return true;
			} else {
				// Invalid.
				Log.i(LoggingTag, "Detected invalid fighter definition.");

				if (!redFighterValid) {
					redFighterTextbox.setError(getString(R.string.red_fighter_empty));
				}

				if (!blueFighterValid) {
					blueFighterTextbox.setError(getString(R.string.blue_fighter_empty));
				}

				return false;
			}
		}
	}
}
